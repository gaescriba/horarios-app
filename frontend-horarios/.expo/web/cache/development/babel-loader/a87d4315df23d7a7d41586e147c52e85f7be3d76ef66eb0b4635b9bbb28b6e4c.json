{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport useLatestCallback from 'use-latest-callback';\nimport { TabBarIndicator } from \"./TabBarIndicator\";\nimport { TabBarItem } from \"./TabBarItem\";\nimport { useAnimatedValue } from \"./useAnimatedValue\";\nvar Separator = function Separator(_ref) {\n  var width = _ref.width;\n  return React.createElement(View, {\n    style: {\n      width: width\n    }\n  });\n};\nvar getFlattenedTabWidth = function getFlattenedTabWidth(style) {\n  var tabStyle = StyleSheet.flatten(style);\n  return tabStyle === null || tabStyle === void 0 ? void 0 : tabStyle.width;\n};\nvar getComputedTabWidth = function getComputedTabWidth(index, layout, routes, scrollEnabled, tabWidths, flattenedWidth) {\n  if (flattenedWidth === 'auto') {\n    return tabWidths[routes[index].key] || 0;\n  }\n  switch (typeof flattenedWidth) {\n    case 'number':\n      return flattenedWidth;\n    case 'string':\n      if (flattenedWidth.endsWith('%')) {\n        var width = parseFloat(flattenedWidth);\n        if (Number.isFinite(width)) {\n          return layout.width * (width / 100);\n        }\n      }\n  }\n  if (scrollEnabled) {\n    return layout.width / 5 * 2;\n  }\n  return layout.width / routes.length;\n};\nvar getMaxScrollDistance = function getMaxScrollDistance(tabBarWidth, layoutWidth) {\n  return tabBarWidth - layoutWidth;\n};\nvar getTranslateX = function getTranslateX(scrollAmount, maxScrollDistance) {\n  return Animated.multiply(Platform.OS === 'android' && I18nManager.isRTL ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1)) : scrollAmount, I18nManager.isRTL ? 1 : -1);\n};\nvar getTabBarWidth = function getTabBarWidth(_ref2) {\n  var navigationState = _ref2.navigationState,\n    layout = _ref2.layout,\n    gap = _ref2.gap,\n    scrollEnabled = _ref2.scrollEnabled,\n    flattenedTabWidth = _ref2.flattenedTabWidth,\n    tabWidths = _ref2.tabWidths;\n  var routes = navigationState.routes;\n  return routes.reduce(function (acc, _, i) {\n    return acc + (i > 0 ? gap != null ? gap : 0 : 0) + getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedTabWidth);\n  }, 0);\n};\nvar normalizeScrollValue = function normalizeScrollValue(_ref3) {\n  var layout = _ref3.layout,\n    navigationState = _ref3.navigationState,\n    gap = _ref3.gap,\n    scrollEnabled = _ref3.scrollEnabled,\n    tabWidths = _ref3.tabWidths,\n    value = _ref3.value,\n    flattenedTabWidth = _ref3.flattenedTabWidth;\n  var tabBarWidth = getTabBarWidth({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var maxDistance = getMaxScrollDistance(tabBarWidth, layout.width);\n  var scrollValue = Math.max(Math.min(value, maxDistance), 0);\n  if (Platform.OS === 'android' && I18nManager.isRTL) {\n    return maxDistance - scrollValue;\n  }\n  return scrollValue;\n};\nvar getScrollAmount = function getScrollAmount(_ref4) {\n  var layout = _ref4.layout,\n    navigationState = _ref4.navigationState,\n    gap = _ref4.gap,\n    scrollEnabled = _ref4.scrollEnabled,\n    flattenedTabWidth = _ref4.flattenedTabWidth,\n    tabWidths = _ref4.tabWidths;\n  var centerDistance = Array.from({\n    length: navigationState.index + 1\n  }).reduce(function (total, _, i) {\n    var tabWidth = getComputedTabWidth(i, layout, navigationState.routes, scrollEnabled, tabWidths, flattenedTabWidth);\n    return total + (navigationState.index === i ? (tabWidth + (gap != null ? gap : 0)) / 2 : tabWidth + (gap != null ? gap : 0));\n  }, 0);\n  var scrollAmount = centerDistance - layout.width / 2;\n  return normalizeScrollValue({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    value: scrollAmount,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n};\nvar getLabelTextDefault = function getLabelTextDefault(_ref5) {\n  var route = _ref5.route;\n  return route.title;\n};\nvar getAccessibleDefault = function getAccessibleDefault(_ref6) {\n  var route = _ref6.route;\n  return typeof route.accessible !== 'undefined' ? route.accessible : true;\n};\nvar getAccessibilityLabelDefault = function getAccessibilityLabelDefault(_ref7) {\n  var route = _ref7.route;\n  return typeof route.accessibilityLabel === 'string' ? route.accessibilityLabel : typeof route.title === 'string' ? route.title : undefined;\n};\nvar renderIndicatorDefault = function renderIndicatorDefault(props) {\n  return React.createElement(TabBarIndicator, props);\n};\nvar getTestIdDefault = function getTestIdDefault(_ref8) {\n  var route = _ref8.route;\n  return route.testID;\n};\nvar MEASURE_PER_BATCH = 10;\nexport function TabBar(_ref9) {\n  var _ref9$getLabelText = _ref9.getLabelText,\n    getLabelText = _ref9$getLabelText === void 0 ? getLabelTextDefault : _ref9$getLabelText,\n    _ref9$getAccessible = _ref9.getAccessible,\n    getAccessible = _ref9$getAccessible === void 0 ? getAccessibleDefault : _ref9$getAccessible,\n    _ref9$getAccessibilit = _ref9.getAccessibilityLabel,\n    getAccessibilityLabel = _ref9$getAccessibilit === void 0 ? getAccessibilityLabelDefault : _ref9$getAccessibilit,\n    _ref9$getTestID = _ref9.getTestID,\n    getTestID = _ref9$getTestID === void 0 ? getTestIdDefault : _ref9$getTestID,\n    _ref9$renderIndicator = _ref9.renderIndicator,\n    renderIndicator = _ref9$renderIndicator === void 0 ? renderIndicatorDefault : _ref9$renderIndicator,\n    _ref9$gap = _ref9.gap,\n    gap = _ref9$gap === void 0 ? 0 : _ref9$gap,\n    scrollEnabled = _ref9.scrollEnabled,\n    jumpTo = _ref9.jumpTo,\n    navigationState = _ref9.navigationState,\n    position = _ref9.position,\n    activeColor = _ref9.activeColor,\n    bounces = _ref9.bounces,\n    contentContainerStyle = _ref9.contentContainerStyle,\n    inactiveColor = _ref9.inactiveColor,\n    indicatorContainerStyle = _ref9.indicatorContainerStyle,\n    indicatorStyle = _ref9.indicatorStyle,\n    labelStyle = _ref9.labelStyle,\n    onTabLongPress = _ref9.onTabLongPress,\n    onTabPress = _ref9.onTabPress,\n    pressColor = _ref9.pressColor,\n    pressOpacity = _ref9.pressOpacity,\n    renderBadge = _ref9.renderBadge,\n    renderIcon = _ref9.renderIcon,\n    renderLabel = _ref9.renderLabel,\n    renderTabBarItem = _ref9.renderTabBarItem,\n    style = _ref9.style,\n    tabStyle = _ref9.tabStyle,\n    testID = _ref9.testID,\n    android_ripple = _ref9.android_ripple;\n  var _React$useState = React.useState({\n      width: 0,\n      height: 0\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    layout = _React$useState2[0],\n    setLayout = _React$useState2[1];\n  var _React$useState3 = React.useState({}),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    tabWidths = _React$useState4[0],\n    setTabWidths = _React$useState4[1];\n  var flatListRef = React.useRef(null);\n  var isFirst = React.useRef(true);\n  var scrollAmount = useAnimatedValue(0);\n  var measuredTabWidths = React.useRef({});\n  var routes = navigationState.routes;\n  var flattenedTabWidth = getFlattenedTabWidth(tabStyle);\n  var isWidthDynamic = flattenedTabWidth === 'auto';\n  var scrollOffset = getScrollAmount({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var hasMeasuredTabWidths = Boolean(layout.width) && routes.slice(0, navigationState.index).every(function (r) {\n    return typeof tabWidths[r.key] === 'number';\n  });\n  React.useEffect(function () {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n    if (isWidthDynamic && !hasMeasuredTabWidths) {\n      return;\n    }\n    if (scrollEnabled) {\n      var _flatListRef$current;\n      (_flatListRef$current = flatListRef.current) === null || _flatListRef$current === void 0 ? void 0 : _flatListRef$current.scrollToOffset({\n        offset: scrollOffset,\n        animated: true\n      });\n    }\n  }, [hasMeasuredTabWidths, isWidthDynamic, scrollEnabled, scrollOffset]);\n  var handleLayout = function handleLayout(e) {\n    var _e$nativeEvent$layout = e.nativeEvent.layout,\n      height = _e$nativeEvent$layout.height,\n      width = _e$nativeEvent$layout.width;\n    setLayout(function (layout) {\n      return layout.width === width && layout.height === height ? layout : {\n        width: width,\n        height: height\n      };\n    });\n  };\n  var tabBarWidth = getTabBarWidth({\n    layout: layout,\n    navigationState: navigationState,\n    tabWidths: tabWidths,\n    gap: gap,\n    scrollEnabled: scrollEnabled,\n    flattenedTabWidth: flattenedTabWidth\n  });\n  var separatorsWidth = Math.max(0, routes.length - 1) * gap;\n  var separatorPercent = separatorsWidth / tabBarWidth * 100;\n  var tabBarWidthPercent = routes.length * 40 + \"%\";\n  var translateX = React.useMemo(function () {\n    return getTranslateX(scrollAmount, getMaxScrollDistance(tabBarWidth, layout.width));\n  }, [layout.width, scrollAmount, tabBarWidth]);\n  var renderItem = React.useCallback(function (_ref10) {\n    var route = _ref10.item,\n      index = _ref10.index;\n    var props = {\n      key: route.key,\n      position: position,\n      route: route,\n      navigationState: navigationState,\n      getAccessibilityLabel: getAccessibilityLabel,\n      getAccessible: getAccessible,\n      getLabelText: getLabelText,\n      getTestID: getTestID,\n      renderBadge: renderBadge,\n      renderIcon: renderIcon,\n      renderLabel: renderLabel,\n      activeColor: activeColor,\n      inactiveColor: inactiveColor,\n      pressColor: pressColor,\n      pressOpacity: pressOpacity,\n      onLayout: isWidthDynamic ? function (e) {\n        measuredTabWidths.current[route.key] = e.nativeEvent.layout.width;\n        if (routes.length > MEASURE_PER_BATCH && index === MEASURE_PER_BATCH && routes.slice(0, MEASURE_PER_BATCH).every(function (r) {\n          return typeof measuredTabWidths.current[r.key] === 'number';\n        })) {\n          setTabWidths(_objectSpread({}, measuredTabWidths.current));\n        } else if (routes.every(function (r) {\n          return typeof measuredTabWidths.current[r.key] === 'number';\n        })) {\n          setTabWidths(_objectSpread({}, measuredTabWidths.current));\n        }\n      } : undefined,\n      onPress: function onPress() {\n        var event = {\n          route: route,\n          defaultPrevented: false,\n          preventDefault: function preventDefault() {\n            event.defaultPrevented = true;\n          }\n        };\n        onTabPress === null || onTabPress === void 0 ? void 0 : onTabPress(event);\n        if (event.defaultPrevented) {\n          return;\n        }\n        jumpTo(route.key);\n      },\n      onLongPress: function onLongPress() {\n        return onTabLongPress === null || onTabLongPress === void 0 ? void 0 : onTabLongPress({\n          route: route\n        });\n      },\n      labelStyle: labelStyle,\n      style: tabStyle,\n      defaultTabWidth: !isWidthDynamic ? getComputedTabWidth(index, layout, routes, scrollEnabled, tabWidths, getFlattenedTabWidth(tabStyle)) : undefined,\n      android_ripple: android_ripple\n    };\n    return React.createElement(React.Fragment, null, gap > 0 && index > 0 ? React.createElement(Separator, {\n      width: gap\n    }) : null, renderTabBarItem ? renderTabBarItem(props) : React.createElement(TabBarItem, props));\n  }, [activeColor, android_ripple, gap, getAccessibilityLabel, getAccessible, getLabelText, getTestID, inactiveColor, isWidthDynamic, jumpTo, labelStyle, layout, navigationState, onTabLongPress, onTabPress, position, pressColor, pressOpacity, renderBadge, renderIcon, renderLabel, renderTabBarItem, routes, scrollEnabled, tabStyle, tabWidths]);\n  var keyExtractor = React.useCallback(function (item) {\n    return item.key;\n  }, []);\n  var contentContainerStyleMemoized = React.useMemo(function () {\n    return [styles.tabContent, scrollEnabled ? {\n      width: tabBarWidth > separatorsWidth ? tabBarWidth : tabBarWidthPercent\n    } : styles.container, contentContainerStyle];\n  }, [contentContainerStyle, scrollEnabled, separatorsWidth, tabBarWidth, tabBarWidthPercent]);\n  var handleScroll = React.useMemo(function () {\n    return Animated.event([{\n      nativeEvent: {\n        contentOffset: {\n          x: scrollAmount\n        }\n      }\n    }], {\n      useNativeDriver: true\n    });\n  }, [scrollAmount]);\n  var handleViewableItemsChanged = useLatestCallback(function (_ref11) {\n    var changed = _ref11.changed;\n    if (routes.length <= MEASURE_PER_BATCH) {\n      return;\n    }\n    var item = changed[changed.length - 1];\n    var index = (item === null || item === void 0 ? void 0 : item.index) || 0;\n    if (item.isViewable && (index % 10 === 0 || index === navigationState.index || index === routes.length - 1)) {\n      setTabWidths(_objectSpread({}, measuredTabWidths.current));\n    }\n  });\n  return React.createElement(Animated.View, {\n    onLayout: handleLayout,\n    style: [styles.tabBar, style]\n  }, React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.indicatorContainer, scrollEnabled ? {\n      transform: [{\n        translateX: translateX\n      }]\n    } : null, tabBarWidth > separatorsWidth ? {\n      width: tabBarWidth - separatorsWidth\n    } : scrollEnabled ? {\n      width: tabBarWidthPercent\n    } : null, indicatorContainerStyle]\n  }, renderIndicator({\n    position: position,\n    layout: layout,\n    navigationState: navigationState,\n    jumpTo: jumpTo,\n    width: isWidthDynamic ? 'auto' : (100 - separatorPercent) / routes.length + \"%\",\n    style: indicatorStyle,\n    getTabWidth: function getTabWidth(i) {\n      return getComputedTabWidth(i, layout, routes, scrollEnabled, tabWidths, flattenedTabWidth);\n    },\n    gap: gap\n  })), React.createElement(View, {\n    style: styles.scroll\n  }, React.createElement(Animated.FlatList, {\n    data: routes,\n    keyExtractor: keyExtractor,\n    horizontal: true,\n    accessibilityRole: \"tablist\",\n    keyboardShouldPersistTaps: \"handled\",\n    scrollEnabled: scrollEnabled,\n    bounces: bounces,\n    initialNumToRender: MEASURE_PER_BATCH,\n    onViewableItemsChanged: handleViewableItemsChanged,\n    alwaysBounceHorizontal: false,\n    scrollsToTop: false,\n    showsHorizontalScrollIndicator: false,\n    showsVerticalScrollIndicator: false,\n    automaticallyAdjustContentInsets: false,\n    overScrollMode: \"never\",\n    contentContainerStyle: contentContainerStyleMemoized,\n    scrollEventThrottle: 16,\n    renderItem: renderItem,\n    onScroll: handleScroll,\n    ref: flatListRef,\n    testID: testID\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scroll: {\n    overflow: Platform.select({\n      default: 'scroll',\n      web: undefined\n    })\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0\n    },\n    zIndex: 1\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap'\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n});","map":{"version":3,"names":["React","Animated","I18nManager","Platform","StyleSheet","View","useLatestCallback","TabBarIndicator","TabBarItem","useAnimatedValue","Separator","_ref","width","createElement","style","getFlattenedTabWidth","tabStyle","flatten","getComputedTabWidth","index","layout","routes","scrollEnabled","tabWidths","flattenedWidth","key","endsWith","parseFloat","Number","isFinite","length","getMaxScrollDistance","tabBarWidth","layoutWidth","getTranslateX","scrollAmount","maxScrollDistance","multiply","OS","isRTL","add","getTabBarWidth","_ref2","navigationState","gap","flattenedTabWidth","reduce","acc","_","i","normalizeScrollValue","_ref3","value","maxDistance","scrollValue","Math","max","min","getScrollAmount","_ref4","centerDistance","Array","from","total","tabWidth","getLabelTextDefault","_ref5","route","title","getAccessibleDefault","_ref6","accessible","getAccessibilityLabelDefault","_ref7","accessibilityLabel","undefined","renderIndicatorDefault","props","getTestIdDefault","_ref8","testID","MEASURE_PER_BATCH","TabBar","_ref9","_ref9$getLabelText","getLabelText","_ref9$getAccessible","getAccessible","_ref9$getAccessibilit","getAccessibilityLabel","_ref9$getTestID","getTestID","_ref9$renderIndicator","renderIndicator","_ref9$gap","jumpTo","position","activeColor","bounces","contentContainerStyle","inactiveColor","indicatorContainerStyle","indicatorStyle","labelStyle","onTabLongPress","onTabPress","pressColor","pressOpacity","renderBadge","renderIcon","renderLabel","renderTabBarItem","android_ripple","_React$useState","useState","height","_React$useState2","_slicedToArray","setLayout","_React$useState3","_React$useState4","setTabWidths","flatListRef","useRef","isFirst","measuredTabWidths","isWidthDynamic","scrollOffset","hasMeasuredTabWidths","Boolean","slice","every","r","useEffect","current","_flatListRef$current","scrollToOffset","offset","animated","handleLayout","e","_e$nativeEvent$layout","nativeEvent","separatorsWidth","separatorPercent","tabBarWidthPercent","translateX","useMemo","renderItem","useCallback","_ref10","item","onLayout","_objectSpread","onPress","event","defaultPrevented","preventDefault","onLongPress","defaultTabWidth","Fragment","keyExtractor","contentContainerStyleMemoized","styles","tabContent","container","handleScroll","contentOffset","x","useNativeDriver","handleViewableItemsChanged","_ref11","changed","isViewable","tabBar","pointerEvents","indicatorContainer","transform","getTabWidth","scroll","FlatList","data","horizontal","accessibilityRole","keyboardShouldPersistTaps","initialNumToRender","onViewableItemsChanged","alwaysBounceHorizontal","scrollsToTop","showsHorizontalScrollIndicator","showsVerticalScrollIndicator","automaticallyAdjustContentInsets","overScrollMode","scrollEventThrottle","onScroll","ref","create","flex","overflow","select","default","web","backgroundColor","elevation","shadowColor","shadowOpacity","shadowRadius","hairlineWidth","shadowOffset","zIndex","flexDirection","flexWrap","top","left","right","bottom"],"sources":["/home/ddonda/horarios-inacap/node_modules/react-native-tab-view/src/TabBar.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  FlatList,\n  I18nManager,\n  LayoutChangeEvent,\n  ListRenderItemInfo,\n  Platform,\n  PressableAndroidRippleConfig,\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n  ViewToken,\n} from 'react-native';\nimport useLatestCallback from 'use-latest-callback';\n\nimport { Props as IndicatorProps, TabBarIndicator } from './TabBarIndicator';\nimport { Props as TabBarItemProps, TabBarItem } from './TabBarItem';\nimport type {\n  Event,\n  Layout,\n  NavigationState,\n  Route,\n  Scene,\n  SceneRendererProps,\n} from './types';\nimport { useAnimatedValue } from './useAnimatedValue';\n\nexport type Props<T extends Route> = SceneRendererProps & {\n  navigationState: NavigationState<T>;\n  scrollEnabled?: boolean;\n  bounces?: boolean;\n  activeColor?: string;\n  inactiveColor?: string;\n  pressColor?: string;\n  pressOpacity?: number;\n  getLabelText?: (scene: Scene<T>) => string | undefined;\n  getAccessible?: (scene: Scene<T>) => boolean | undefined;\n  getAccessibilityLabel?: (scene: Scene<T>) => string | undefined;\n  getTestID?: (scene: Scene<T>) => string | undefined;\n  renderLabel?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderIcon?: (\n    scene: Scene<T> & {\n      focused: boolean;\n      color: string;\n    }\n  ) => React.ReactNode;\n  renderBadge?: (scene: Scene<T>) => React.ReactNode;\n  renderIndicator?: (props: IndicatorProps<T>) => React.ReactNode;\n  renderTabBarItem?: (\n    props: TabBarItemProps<T> & { key: string }\n  ) => React.ReactElement;\n  onTabPress?: (scene: Scene<T> & Event) => void;\n  onTabLongPress?: (scene: Scene<T>) => void;\n  tabStyle?: StyleProp<ViewStyle>;\n  indicatorStyle?: StyleProp<ViewStyle>;\n  indicatorContainerStyle?: StyleProp<ViewStyle>;\n  labelStyle?: StyleProp<TextStyle>;\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  gap?: number;\n  testID?: string;\n  android_ripple?: PressableAndroidRippleConfig;\n};\n\ntype FlattenedTabWidth = string | number | undefined;\n\nconst Separator = ({ width }: { width: number }) => {\n  return <View style={{ width }} />;\n};\n\nconst getFlattenedTabWidth = (style: StyleProp<ViewStyle>) => {\n  const tabStyle = StyleSheet.flatten(style);\n\n  return tabStyle?.width;\n};\n\nconst getComputedTabWidth = (\n  index: number,\n  layout: Layout,\n  routes: Route[],\n  scrollEnabled: boolean | undefined,\n  tabWidths: { [key: string]: number },\n  flattenedWidth: FlattenedTabWidth\n) => {\n  if (flattenedWidth === 'auto') {\n    return tabWidths[routes[index].key] || 0;\n  }\n\n  switch (typeof flattenedWidth) {\n    case 'number':\n      return flattenedWidth;\n    case 'string':\n      if (flattenedWidth.endsWith('%')) {\n        const width = parseFloat(flattenedWidth);\n        if (Number.isFinite(width)) {\n          return layout.width * (width / 100);\n        }\n      }\n  }\n\n  if (scrollEnabled) {\n    return (layout.width / 5) * 2;\n  }\n  return layout.width / routes.length;\n};\n\nconst getMaxScrollDistance = (tabBarWidth: number, layoutWidth: number) =>\n  tabBarWidth - layoutWidth;\n\nconst getTranslateX = (\n  scrollAmount: Animated.Value,\n  maxScrollDistance: number\n) =>\n  Animated.multiply(\n    Platform.OS === 'android' && I18nManager.isRTL\n      ? Animated.add(maxScrollDistance, Animated.multiply(scrollAmount, -1))\n      : scrollAmount,\n    I18nManager.isRTL ? 1 : -1\n  );\n\nconst getTabBarWidth = <T extends Route>({\n  navigationState,\n  layout,\n  gap,\n  scrollEnabled,\n  flattenedTabWidth,\n  tabWidths,\n}: Pick<Props<T>, 'navigationState' | 'gap' | 'layout' | 'scrollEnabled'> & {\n  tabWidths: Record<string, number>;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const { routes } = navigationState;\n\n  return routes.reduce<number>(\n    (acc, _, i) =>\n      acc +\n      (i > 0 ? gap ?? 0 : 0) +\n      getComputedTabWidth(\n        i,\n        layout,\n        routes,\n        scrollEnabled,\n        tabWidths,\n        flattenedTabWidth\n      ),\n    0\n  );\n};\n\nconst normalizeScrollValue = <T extends Route>({\n  layout,\n  navigationState,\n  gap,\n  scrollEnabled,\n  tabWidths,\n  value,\n  flattenedTabWidth,\n}: Pick<Props<T>, 'layout' | 'navigationState' | 'gap' | 'scrollEnabled'> & {\n  tabWidths: Record<string, number>;\n  value: number;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const tabBarWidth = getTabBarWidth({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n  const maxDistance = getMaxScrollDistance(tabBarWidth, layout.width);\n  const scrollValue = Math.max(Math.min(value, maxDistance), 0);\n\n  if (Platform.OS === 'android' && I18nManager.isRTL) {\n    // On Android, scroll value is not applied in reverse in RTL\n    // so we need to manually adjust it to apply correct value\n    return maxDistance - scrollValue;\n  }\n\n  return scrollValue;\n};\n\nconst getScrollAmount = <T extends Route>({\n  layout,\n  navigationState,\n  gap,\n  scrollEnabled,\n  flattenedTabWidth,\n  tabWidths,\n}: Pick<Props<T>, 'layout' | 'navigationState' | 'scrollEnabled' | 'gap'> & {\n  tabWidths: Record<string, number>;\n  flattenedTabWidth: FlattenedTabWidth;\n}) => {\n  const centerDistance = Array.from({\n    length: navigationState.index + 1,\n  }).reduce<number>((total, _, i) => {\n    const tabWidth = getComputedTabWidth(\n      i,\n      layout,\n      navigationState.routes,\n      scrollEnabled,\n      tabWidths,\n      flattenedTabWidth\n    );\n\n    // To get the current index centered we adjust scroll amount by width of indexes\n    // 0 through (i - 1) and add half the width of current index i\n    return (\n      total +\n      (navigationState.index === i\n        ? (tabWidth + (gap ?? 0)) / 2\n        : tabWidth + (gap ?? 0))\n    );\n  }, 0);\n\n  const scrollAmount = centerDistance - layout.width / 2;\n\n  return normalizeScrollValue({\n    layout,\n    navigationState,\n    tabWidths,\n    value: scrollAmount,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n};\n\nconst getLabelTextDefault = ({ route }: Scene<Route>) => route.title;\n\nconst getAccessibleDefault = ({ route }: Scene<Route>) =>\n  typeof route.accessible !== 'undefined' ? route.accessible : true;\n\nconst getAccessibilityLabelDefault = ({ route }: Scene<Route>) =>\n  typeof route.accessibilityLabel === 'string'\n    ? route.accessibilityLabel\n    : typeof route.title === 'string'\n    ? route.title\n    : undefined;\n\nconst renderIndicatorDefault = (props: IndicatorProps<Route>) => (\n  <TabBarIndicator {...props} />\n);\n\nconst getTestIdDefault = ({ route }: Scene<Route>) => route.testID;\n\n// How many items measurements should we update per batch.\n// Defaults to 10, since that's whats FlatList is using in initialNumToRender.\nconst MEASURE_PER_BATCH = 10;\n\nexport function TabBar<T extends Route>({\n  getLabelText = getLabelTextDefault,\n  getAccessible = getAccessibleDefault,\n  getAccessibilityLabel = getAccessibilityLabelDefault,\n  getTestID = getTestIdDefault,\n  renderIndicator = renderIndicatorDefault,\n  gap = 0,\n  scrollEnabled,\n  jumpTo,\n  navigationState,\n  position,\n  activeColor,\n  bounces,\n  contentContainerStyle,\n  inactiveColor,\n  indicatorContainerStyle,\n  indicatorStyle,\n  labelStyle,\n  onTabLongPress,\n  onTabPress,\n  pressColor,\n  pressOpacity,\n  renderBadge,\n  renderIcon,\n  renderLabel,\n  renderTabBarItem,\n  style,\n  tabStyle,\n  testID,\n  android_ripple,\n}: Props<T>) {\n  const [layout, setLayout] = React.useState<Layout>({ width: 0, height: 0 });\n  const [tabWidths, setTabWidths] = React.useState<Record<string, number>>({});\n  const flatListRef = React.useRef<FlatList | null>(null);\n  const isFirst = React.useRef(true);\n  const scrollAmount = useAnimatedValue(0);\n  const measuredTabWidths = React.useRef<Record<string, number>>({});\n\n  const { routes } = navigationState;\n  const flattenedTabWidth = getFlattenedTabWidth(tabStyle);\n  const isWidthDynamic = flattenedTabWidth === 'auto';\n  const scrollOffset = getScrollAmount({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n\n  const hasMeasuredTabWidths =\n    Boolean(layout.width) &&\n    routes\n      .slice(0, navigationState.index)\n      .every((r) => typeof tabWidths[r.key] === 'number');\n\n  React.useEffect(() => {\n    if (isFirst.current) {\n      isFirst.current = false;\n      return;\n    }\n\n    if (isWidthDynamic && !hasMeasuredTabWidths) {\n      return;\n    }\n\n    if (scrollEnabled) {\n      flatListRef.current?.scrollToOffset({\n        offset: scrollOffset,\n        animated: true,\n      });\n    }\n  }, [hasMeasuredTabWidths, isWidthDynamic, scrollEnabled, scrollOffset]);\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    setLayout((layout) =>\n      layout.width === width && layout.height === height\n        ? layout\n        : { width, height }\n    );\n  };\n\n  const tabBarWidth = getTabBarWidth({\n    layout,\n    navigationState,\n    tabWidths,\n    gap,\n    scrollEnabled,\n    flattenedTabWidth,\n  });\n\n  const separatorsWidth = Math.max(0, routes.length - 1) * gap;\n  const separatorPercent = (separatorsWidth / tabBarWidth) * 100;\n  const tabBarWidthPercent = `${routes.length * 40}%`;\n\n  const translateX = React.useMemo(\n    () =>\n      getTranslateX(\n        scrollAmount,\n        getMaxScrollDistance(tabBarWidth, layout.width)\n      ),\n    [layout.width, scrollAmount, tabBarWidth]\n  );\n\n  const renderItem = React.useCallback(\n    ({ item: route, index }: ListRenderItemInfo<T>) => {\n      const props: TabBarItemProps<T> & { key: string } = {\n        key: route.key,\n        position: position,\n        route: route,\n        navigationState: navigationState,\n        getAccessibilityLabel: getAccessibilityLabel,\n        getAccessible: getAccessible,\n        getLabelText: getLabelText,\n        getTestID: getTestID,\n        renderBadge: renderBadge,\n        renderIcon: renderIcon,\n        renderLabel: renderLabel,\n        activeColor: activeColor,\n        inactiveColor: inactiveColor,\n        pressColor: pressColor,\n        pressOpacity: pressOpacity,\n        onLayout: isWidthDynamic\n          ? (e: LayoutChangeEvent) => {\n              measuredTabWidths.current[route.key] = e.nativeEvent.layout.width;\n\n              // When we have measured widths for all of the tabs, we should updates the state\n              // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n              // If we have more than 10 routes divide updating tabWidths into multiple batches. Here we update only first batch of 10 items.\n              if (\n                routes.length > MEASURE_PER_BATCH &&\n                index === MEASURE_PER_BATCH &&\n                routes\n                  .slice(0, MEASURE_PER_BATCH)\n                  .every(\n                    (r) => typeof measuredTabWidths.current[r.key] === 'number'\n                  )\n              ) {\n                setTabWidths({ ...measuredTabWidths.current });\n              } else if (\n                routes.every(\n                  (r) => typeof measuredTabWidths.current[r.key] === 'number'\n                )\n              ) {\n                // When we have measured widths for all of the tabs, we should updates the state\n                // We avoid doing separate setState for each layout since it triggers multiple renders and slows down app\n                setTabWidths({ ...measuredTabWidths.current });\n              }\n            }\n          : undefined,\n        onPress: () => {\n          const event: Scene<T> & Event = {\n            route,\n            defaultPrevented: false,\n            preventDefault: () => {\n              event.defaultPrevented = true;\n            },\n          };\n\n          onTabPress?.(event);\n\n          if (event.defaultPrevented) {\n            return;\n          }\n\n          jumpTo(route.key);\n        },\n        onLongPress: () => onTabLongPress?.({ route }),\n        labelStyle: labelStyle,\n        style: tabStyle,\n        // Calculate the deafult width for tab for FlatList to work\n        defaultTabWidth: !isWidthDynamic\n          ? getComputedTabWidth(\n              index,\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              getFlattenedTabWidth(tabStyle)\n            )\n          : undefined,\n        android_ripple,\n      };\n\n      return (\n        <>\n          {gap > 0 && index > 0 ? <Separator width={gap} /> : null}\n          {renderTabBarItem ? (\n            renderTabBarItem(props)\n          ) : (\n            <TabBarItem {...props} />\n          )}\n        </>\n      );\n    },\n    [\n      activeColor,\n      android_ripple,\n      gap,\n      getAccessibilityLabel,\n      getAccessible,\n      getLabelText,\n      getTestID,\n      inactiveColor,\n      isWidthDynamic,\n      jumpTo,\n      labelStyle,\n      layout,\n      navigationState,\n      onTabLongPress,\n      onTabPress,\n      position,\n      pressColor,\n      pressOpacity,\n      renderBadge,\n      renderIcon,\n      renderLabel,\n      renderTabBarItem,\n      routes,\n      scrollEnabled,\n      tabStyle,\n      tabWidths,\n    ]\n  );\n\n  const keyExtractor = React.useCallback((item: T) => item.key, []);\n\n  const contentContainerStyleMemoized = React.useMemo(\n    () => [\n      styles.tabContent,\n      scrollEnabled\n        ? {\n            width:\n              tabBarWidth > separatorsWidth ? tabBarWidth : tabBarWidthPercent,\n          }\n        : styles.container,\n      contentContainerStyle,\n    ],\n    [\n      contentContainerStyle,\n      scrollEnabled,\n      separatorsWidth,\n      tabBarWidth,\n      tabBarWidthPercent,\n    ]\n  );\n\n  const handleScroll = React.useMemo(\n    () =>\n      Animated.event(\n        [\n          {\n            nativeEvent: {\n              contentOffset: { x: scrollAmount },\n            },\n          },\n        ],\n        { useNativeDriver: true }\n      ),\n    [scrollAmount]\n  );\n\n  const handleViewableItemsChanged = useLatestCallback(\n    ({ changed }: { changed: ViewToken[] }) => {\n      if (routes.length <= MEASURE_PER_BATCH) {\n        return;\n      }\n      // Get next vievable item\n      const item = changed[changed.length - 1];\n      const index = item?.index || 0;\n      if (\n        item.isViewable &&\n        (index % 10 === 0 ||\n          index === navigationState.index ||\n          index === routes.length - 1)\n      ) {\n        setTabWidths({ ...measuredTabWidths.current });\n      }\n    }\n  );\n\n  return (\n    <Animated.View onLayout={handleLayout} style={[styles.tabBar, style]}>\n      <Animated.View\n        pointerEvents=\"none\"\n        style={[\n          styles.indicatorContainer,\n          scrollEnabled ? { transform: [{ translateX }] as any } : null,\n          tabBarWidth > separatorsWidth\n            ? { width: tabBarWidth - separatorsWidth }\n            : scrollEnabled\n            ? { width: tabBarWidthPercent }\n            : null,\n          indicatorContainerStyle,\n        ]}\n      >\n        {renderIndicator({\n          position,\n          layout,\n          navigationState,\n          jumpTo,\n          width: isWidthDynamic\n            ? 'auto'\n            : `${(100 - separatorPercent) / routes.length}%`,\n          style: indicatorStyle,\n          getTabWidth: (i: number) =>\n            getComputedTabWidth(\n              i,\n              layout,\n              routes,\n              scrollEnabled,\n              tabWidths,\n              flattenedTabWidth\n            ),\n          gap,\n        })}\n      </Animated.View>\n      <View style={styles.scroll}>\n        <Animated.FlatList\n          data={routes as Animated.WithAnimatedValue<T>[]}\n          keyExtractor={keyExtractor}\n          horizontal\n          accessibilityRole=\"tablist\"\n          keyboardShouldPersistTaps=\"handled\"\n          scrollEnabled={scrollEnabled}\n          bounces={bounces}\n          initialNumToRender={MEASURE_PER_BATCH}\n          onViewableItemsChanged={handleViewableItemsChanged}\n          alwaysBounceHorizontal={false}\n          scrollsToTop={false}\n          showsHorizontalScrollIndicator={false}\n          showsVerticalScrollIndicator={false}\n          automaticallyAdjustContentInsets={false}\n          overScrollMode=\"never\"\n          contentContainerStyle={contentContainerStyleMemoized}\n          scrollEventThrottle={16}\n          renderItem={renderItem}\n          onScroll={handleScroll}\n          ref={flatListRef}\n          testID={testID}\n        />\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  scroll: {\n    overflow: Platform.select({ default: 'scroll', web: undefined }),\n  },\n  tabBar: {\n    backgroundColor: '#2196f3',\n    elevation: 4,\n    shadowColor: 'black',\n    shadowOpacity: 0.1,\n    shadowRadius: StyleSheet.hairlineWidth,\n    shadowOffset: {\n      height: StyleSheet.hairlineWidth,\n      width: 0,\n    },\n    zIndex: 1,\n  },\n  tabContent: {\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n  },\n  indicatorContainer: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}